.tituloP{
    color: rgb(238, 248, 248);
    text-align: center;/*Color, text-align...son los atributos. Los valores son el color que eligimos, grueso etc */
    font-size: 2cm;
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
    border: 15px solid rgb(209, 161, 5);
    background-color: rgb(10, 10, 10);
   }
   body{
       background-color: rgba(7, 191, 247, 0.199);
       font-size: 1cm;
      /* margin: 0;
       padding: 0;*/ /*Margenes a cero */
   }
   .titulo{
    color: rgb(47, 0, 255);
    margin-left: 2cm;
    font-size: 1.5cm;
    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
    text-align: left;
}
/* Buenas practicas*/
*,
 *::before,
 *::after{
  box-sizing: border-box;
 }

 .section{
    display: flex;
    flex-direction: column;
}
img{
   width: 600px;
   margin: auto;
   padding: 10px;
}



/*          ANIMACIONES

Las animaciones CSS3 permiten animar la transición entre un estilo CSS y otro. Las animaciones constan de dos componentes: 
un estilo que describe la animación CSS y un conjunto de fotogramas que indican su estado inicial y final, así como 
posibles puntos intermedios en la misma.

Las animaciones CSS tienen tres ventajas principales sobre las técnicas tradicionales de animación basada en scripts:

Son muy fáciles de usar para animaciones sencillas, puedes hacerlo incluso sin tener conocimientos de Javascript.
La animación se muestra correctamente, incluso en equipos poco potentes. Animaciones simples realizadas en Javascript 
pueden verse mal (a menos que estén muy bien hechas). El motor de renderizado puede usar técnicas de optimización como 
el "frame-skipping" u otras técnicas para que la ejecución de la animación se vea tan suave como sea posible.
Al ser el navegador quien controle la secuencia de la animación, permitimos que optimice el rendimiento y eficiencia 
de la misma, por ejemplo, reduciendo la frecuencia de actualización de la animación ejecutándola en pestañas que no 
estén visibles.

Configurando la animación
Para crear una secuencia de animación CSS, tú estilizarás el elemento que quieras animar con la propiedad animation y 
sus sub-propiedades. Con ellas podemos no solo configurar el ritmo y la duración de la animación sino otros detalles 
sobre la secuencia de la animación. Con ellas no configuramos la apariencia actual de la animación, para ello disponemos 
de @keyframes como describiremos más adelante .

Las subpropiedades de animation son:

animation-delay
Tiempo de retardo entre el momento en que el elemento se carga y el comienzo de la secuencia de la animación.

animation-direction
Indica si la animación debe retroceder hasta el fotograma de inicio al finalizar la secuencia o si debe comenzar desde 
el principio al llegar al final.

animation-duration
Indica la cantidad de tiempo que la animación consume en completar su ciclo (duración).

animation-iteration-count
El número de veces que se repite. Podemos indicar infinite para repetir la animación indefinidamente.

animation-name
Especifica el nombre de la regla @keyframes que describe los fotogramas de la animación.

animation-play-state
Permite pausar y reanudar la secuencia de la animación.

animation-timing-function
Indica el ritmo de la animación, es decir, como se muestran los fotogramas de la animación, estableciendo curvas de 
aceleración.

animation-fill-mode
Especifica qué valores tendrán las propiedades después de finalizar la animación (los de antes de ejecutarla, los del
 último fotograma de la animación o ambos).


Definiendo la secuencia de la animación con fotogramas:

Una vez configurado el tiempo de la animación, necesitamos definir su apariencia. Esto lo haremos estableciendo dos 
fotogramas más usando la regla @keyframes. Cada fotograma describe cómo se muestra cada elemento animado en un momento 
dado durante la secuencia de la animación.
Desde que se define el tiempo y el ritmo de la animación, el fotograma usa percentage para indicar en qué momento de la 
secuencia de la animación tiene lugar. 0% es el principio, 100% es el estado final de la animación. Debemos especificar 
estos dos momentos para que el navegador sepa dónde debe comenzar y finalizar; debido a su importancias, estos dos 
momentos tienen alias especiales: from y to.
Además puedes, opcionalmente, incluir fotogramas que describan pasos intermedios entre el punto inicial y final de la 
animación.    */

/*        Ejemplo de pelota  */

.zona{
    display: flex;
    width: 100%;
    height: 100vh;
    border: 1px solid black;
    position: relative;
    justify-content: center;
    background: url(https://turismolanzarote.com/wp-content/uploads/2018/07/Playas-CostaTeguise-PlayaElJablillo-LR-4.jpg) center/cover;
    
}
.pelota{
    width: 150px;
    height: 150px;
    border-radius: 50%;
    background: radial-gradient(circle at 0 0, red 25%, rgb(129, 4, 4)75%, black);
    animation-name:rebotar;
    animation-duration: 1s;
    animation-delay: 1s;
    animation-direction: alternate;
    animation-iteration-count: infinite;
    animation-play-state: running;
    animation-fill-mode: forwards;
    animation-timing-function: ease-in;
}
@keyframes rebotar{
    from{
        margin-top: 20px;       
      }
    to {
     margin-top: 480px;
    }
    }
.suelo{
    width: 100px;
    height: 6px;
    background-color: rgba(0, 0, 0, 0.808);
    box-shadow: 0 0 10px 10px rgba(0, 0, 0, 0.836);
    border-radius: 50%;
    position: absolute;
    bottom: 20px;
    transform: scale(0.5);
    animation: sombra 1s alternate-reverse infinite linear;
}
@keyframes sombra{
    from{
        margin-bottom: 20px;
    }
    to{
        width: 250px;
    }
}

/*          3D en css  PERSPECTIVE

La propiedad perspective CSS determina la distancia entre el plano z=0 y el usuario para dar algo de perspectiva al 
elemento 3D posicionado. Cada elemento 3D con z>0 se hace más grande y con z<0 se vuelve más pequeño. La intensidad 
del efecto es determinado por el valor de esta propiedad.
Parte de los elementos 3D que se encuentran destrás del usuario, es decir que su coordenada del eje z es mayor que el 
valor de la propiedad perspective de CSS no es dibujada.
La posición de origen que se usará para la transformación es por defecto colocado en el centro del elemento, pero su 
posición puede ser cambiada usando la propiedad perspective-origin.
Usando esta propiedad con un valor diferente a 0 y none se crea un nuevo contexto de apilamiento.   

SINTAXIS

Sintaxis Formal: none | <length>
perspective: none
perspective: 20px     <longitud> valores 
perspective: 3.5em
perspective: inherited

VALORES

none
Es una palabra clave que indica que ninguna transformación de perspectiva será aplicada.
<length>
Es una <length> dando la distancia desde el usuario al plano z=0. Esta es usada para aplicar una transformación de 
perspectiva al elemento  y su contenido. Si es 0 o un valor negativo, no se aplica una transformación de la perspectiva.*/

/*Ejemplos de diferentes vistas con perspective */

.zonaPerspective{
 display: flex;
 width: 100%;
 justify-content: space-around;   
 perspective: 1000px;
 perspective-origin: center center;
}
.p1{
    width: 200px;
    height:300px;
    background-color: red;
    border: 2px solid black;
    text-align: center;
    line-height: 300px;
    font-size: 0.5cm;
    color: antiquewhite;
}
.p1:first-child{
transform: rotateX(40deg);}

.p1:nth-child(2){
 transform: rotateY(30deg);
    
}
.p1:nth-child(3){
    transform: rotateY(180deg) rotateX(-30deg)
    
}

.zonaPerspective2{
    display: flex;
    width: 100%;
    justify-content: space-around;   
    perspective: 1000px;
    perspective-origin: top left;
    margin-top: 3cm;
   }
   .p2{
       width: 200px;
       height:300px;
       background-color: red;
       border: 2px solid black;
       text-align: center;
       line-height: 300px;
       font-size: 0.5cm;
       color: antiquewhite;
   }
   .p2:first-child{
   transform: rotateX(40deg);}
   
   .p2:nth-child(2){
    transform: rotateY(30deg);
       
   }
   .p2:nth-child(3){
       transform: rotateY(30deg);
       backface-visibility: hidden;
       
   }

   /*      Ejercicio de moneda       */

   .contenedor{
       display: flex;
       width: 100%;
       margin-top: 2cm;
       perspective: 700px;
       perspective-origin: center;

   }
   .moneda{
       height:400px;
       width: 400px;
       position: relative;
       margin: auto;
       transform-style: preserve-3d;
       animation: giro 3s forwards infinite linear;
       
   }
     @keyframes giro{

        from{
            transform: rotateY(0deg);
            
        }
        
         to{
             transform: rotateY(360deg);}
     }
   .i1{
    position: absolute;
    width: 418px;
    height: 422px;
    padding: 0;
    margin:0px 0px -10px -16px;
    
}
   .i2{
       position: absolute;
        width: 400px;
       height: 400px;
       left: -8px;
       bottom: -10px;
      transform: rotateY(180deg);
}

/*     CARD ANIMATION           */

.contenedorb{

    display: flex;
    width: 100%;
    perspective: 1000px;
    perspective-origin: center;

}
.card{
    margin: auto;
    width: 500px;
    height: 500px;
    position: relative;   
    transition: all 3s;
    transform-style: preserve-3d;
}
.face{
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    color: white;
    font-size: 2cm;
    border: 5px solid;
    background-image: linear-gradient(45deg, rgb(95, 108, 231) 25%, rgb(255, 224, 46) 85%);
}
.back{
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    color: rgba(250, 246, 3, 0.815);
    border: 5px solid;
    font-size: 2cm;
    transform: rotateX(180deg);
    backface-visibility: hidden;
    background-image: linear-gradient(45deg, rgb(14, 14, 17) 50%, rgb(249, 250, 199) 85%);
}
  
.contenedorb:hover .card{
    transform: rotateX(180deg);
}
.contenedorb:hover .back{
 backface-visibility: visible;
}
   
/*   CUBO 3D ANIMADO  */

.cubo, .cara{
    width: 300px;
    height: 300px;
}
.cubo{
    margin: 10px auto 6cm auto;
    transform-style: preserve-3d;
    transform: perspective(700px) rotateX(-30deg) rotateY(-30deg) ;
}
.cubo {
    animation: rotate 4s infinite linear;
  }
  @keyframes rotate {
      0% { transform: rotateX(   0deg ) rotateY(   0deg ); }
    100% { transform: rotateX( 360deg ) rotateY( 360deg ); }
  }
.frente{
    position: absolute;
    background-color: red;
    transform: translateZ(150px);
}
.superior{
    background-color: yellow;
    transform: rotateX(90deg) translateZ(-150px)
}
.derecha{
    background-color: blue;
    transform: rotateY(90deg) translateZ(150px);
}
.izquierda{
    background-color: rgb(120, 199, 2);
    transform: rotateY(90deg) translateZ(-150px) translateY(-300px);
}
.atras{
    background-color: blueviolet;
    transform: translateY(-600px) translateZ(-150px);
}
.inferior{
    background-color: rgb(255, 90, 30);
    transform: translateY(-750px) rotateX(90deg);
}


/*   EJERCICIO DE ESFERA 3D   */

.contene{
    width: 100%;
    height: 500px;
    display: flex;
    perspective: 1000px;
}
.esfera{
    margin: auto;
    width: 300px;
    height: 300px;
    transition: all 5s;
    animation: sphere 3s infinite linear;
    transform-style: preserve-3d;
}
@keyframes sphere{
    to{
        transform: rotateY(1turn);
    }
}

.circulo{
    position: absolute;
    width: 300px;
    height: 300px;
    border: 2px solid red;
    transform: rotateY(80deg);
    border-radius: 50%;
   }
.circulo:nth-child(2){
    transform: rotateY(40deg);
}
.circulo:nth-child(3){
    transform: rotateY(20deg);
}.circulo:nth-child(4){
    transform: rotateY(60deg);
}
.circulo:nth-child(4){
    transform: rotateY(100deg);
}
.circulo:nth-child(5){
    transform: rotateY(1200deg);
}
.circulo:nth-child(6){
    transform: rotateY(140deg);
}
.circulo:nth-child(7){
    transform: rotateY(160deg);
}
.circulo:nth-child(8){
    transform: rotateY(180deg);
}
.circulo:nth-child(9){
    transform: rotateY(200deg);
}
