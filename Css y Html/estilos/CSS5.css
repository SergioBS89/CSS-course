
.tituloP{
    color: rgb(238, 248, 248);
    text-align: center;/*Color, text-align...son los atributos. Los valores son el color que eligimos, grueso etc */
    font-size: 2cm;
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
    border: 15px solid rgb(209, 161, 5);
    background-color: rgb(10, 10, 10);
   }
   body{
       background-color: rgb(104, 107, 112);
       font-size: 1cm;
   }
   .titulo{
    color: rgb(241, 121, 121);
    margin-left: 2cm;
    font-size: 1.5cm;
    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
    text-align: left;
}
/* Buenas practicas*/
*,
 *::before,
 *::after{
  box-sizing: border-box;
 }

 h2{
     color: rgb(243, 185, 39);
 }

 /*       FLEX-BOX   

 Lo primero que necesitamos saber es que flexbox requiere a un padre y al menos un elemento hijo.

 Padre => flex-container
 HijoS => flex-item (cajas flexibles)

EL CONTENEDOR DE FLEX

Un área del documento que contiene un flexbox es llamada contendedor flex. Para crear un contenedor flex (PADRE),
establecemos la propiedad del área del contenedor display como flex o inline-flex. Tan pronto como hacemos esto,
los hijos directos de este contenedor se vuelven ítems flex. Como con todas las propiedades de CSS, se definen algunos 
valores iniciales, así que cuando creemos un contenedor flex todos los ítems flex contenidos se comportarán de la 
siguiente manera.

-Los ítems se despliegan sobre una fila (la propiedad flex-direction por defecto es row).
-Los ítems empiezan desde el margen inicial sobre el eje principal.
-Los ítems no se ajustan en la dimensión principal, pero se pueden contraer.
-Los ítems se ajustarán para llenar el tamaño del eje cruzado.
-La propiedad flex-basis es definida como auto.
-La propiedad flex-wrap es definida como nowrap.

El resultado es que todos los ítems se alinearán en una solo fila, usando el tamaño del contenedor como su tamaño en el
eje principal. Si hay más ítems de los que caben en el contenedor, estos no pasarán más abajo si no que sobrepasarán el
margen. Si hay ítems más altos que otros, todos los ítems serán ajustados en el eje cruzado para alcanzar al mayor.
     
 
 El Módulo de Caja Flexible, comúnmente llamado flexbox, fue diseñado como un modelo unidimensional de layout, y como 
 un método que pueda ayudar a distribuir el espacio entre los ítems de una interfaz y mejorar las capacidades de alinea-
 ción. Este artículo hace un repaso de las principales características de flexbox, las que exploraremos con mayor detalle 
 en el resto de estas guías.

Cuando describimos a flexbox como unidimensional destacamos el hecho que flexbox maneja el layout en una sola dimensión a 
la vez — ya sea como fila o como columna. Esto contrasta con el modelo bidimensional del Grid Layout de CSS, el cual 
controla columnas y filas a la vez.

LOS DOS EJES DE FLEX

Cuando trabajamos con flexbox necesitamos pensar en términos de dos ejes — el eje principal y el eje cruzado. 
El eje principal está definido por la propiedad flex-direction, y el eje cruzado es perpendicular a este. Todo lo que 
hacemos con flexbox está referido a estos dos ejes, por lo que vale la pena entender cómo trabajan desde el principio.

EL EJE PRINCIPAL
El eje principal está definido por flex-direction, que posee cuatro posibles valores:

-row
-row-reverse
-column
-column-reverse

Si elegimos row o row-reverse, el eje principal correrá a lo largo de la fila según la dirección de la línea.

Al elegir column o column-reverse el eje principal correrá desde el borde superior de la página hasta el final — según 
la dirección del bloque.

EL EJE CRUZADO
El eje cruzado va perpendicular al eje principal, y por lo tanto si flex-direction (del eje principal) es row o 
row-reverse el eje cruzado irá por las columnas.
Si el eje principal es column o column-reverse entonces el eje cruzado corre a lo largo de las filas.

Entender cuál eje es cuál es importante cuando empezamos a mirar la alineación y justificación flexible de los ítems;
flexbox posee propiedades que permiten alinear y justificar el contenido sobre un eje o el otro.

LINEAS DE INICIO Y FIN

Otra área vital de entendimiento es cómo flexbox no hace suposiciones sobre la manera de escribir del documento. En el 
pasado, CSS estaba muy inclinado hacia el modo de escritura horizontal y de izquierda a derecha. Los métodos modernos de 
layout acogen la totalidad de modos de escritura así que no es necesario asumir que una línea de texto empezará arriba 
del documento y correrá de izquierda a derecha, con nuevas líneas dispuestas una abajo de la otra.

Si flex-direction es row, entonces el margen inicial del eje principal quedará a la izquierda Y el margen final a la 
derecha.

Después de un tiempo, pensar en inicial y final en vez de izquierda y derecha se hará natural, y será útil cuando 
interactúe con otros métodos de layout tales como el CSS Grid Layout que sigue los mismos patrones.


CAMBIAR FLEX DIRECTION

Al añadir la propiedad flex-direction en el contenedor flex nos permite cambiar la dirección de cómo los ítems son 
desplegados. Colocando flex-direction: row-reverse se mantendrá el despliegue a lo largo de la fila, sin embargo el 
inicio y final quedarán al revés del original.

Si cambiamos flex-direction a column el eje principal se cambiará y los ítems aparecerán en una columna. 
Colocando column-reverse las líneas de inicio y fin serán nuevamente puestas al revés.

CONTENEDORES FLEX MULTI-LINEA CON FLEX-WRAP

Si bien flexbox es un modelo unidimensional, es posible lograr que nuestros ítems flex sean repartidos en varías líneas. 
Haciendo esto, se deberá considerar cada línea como un nuevo contenedor flex. Cualquier distribución del espacio solo 
sucederá dentro de esa línea, sin referenciar las líneas colaterales.

Para lograr repartirse en varias líneas añada la propiedad flex-wrap con el valor wrap. Cuando los ítems sean demasiados 
para desplegarlos en una línea, serán repartidos en la línea siguiente. El ejemplo en vivo de abajo contiene ítems que se 
les ha asignando un ancho, donde el ancho total de los ítems excede al del contenedor flex. Cuando flex-wrap se coloca 
como wrap, los ítems se repartirán. Al colocarlo como nowrap, el cual es el valor inicial, estos se contraerán para calzar 
con el contenedor ya que usan los valores iniciales de flexbox que permiten que los ítems se contraigan. Al usar nowrap 
los ítems podrían salirse del margen si estos no pudieran contraerse, o no contraerse lo suficiente para ser calzados.

LA ABREVIATURA FLEX-FLOW

Se pueden combinar las propiedades flex-direction y flex-wrap en la abreviatura flex-flow . El primer valor especificado 
es flex-direction y el segundo valor es flex-wrap.

PROPIEDADES APLICADAS A LOS ITEMS FLEX
Para obtener más control sobre los ítems flex podemos apuntarlos directamente. Hacemos esto a través de tres propiedades:

-flex-grow
-flex-shrink
-flex-basis

Antes de darle sentido a estas propiedades debemos considerar el concepto de espacio disponible. Lo que hacemos cuando 
cambiamos el valor de alguna de estas propiedades es cambiar la forma que se distribuye el espacio disponible entre 
nuestros ítems. Este concepto de espacio disponible es también importante cuando veamos la alineación de ítems.

Si tenemos tres ítems con un ancho de 100 pixeles en un contenedor de 500 pixeles de ancho, entonces el espacio que se 
necesita para colocar nuestros ítems es de 300 pixeles. Esto deja 200 pixeles de espacio disponible. Si no cambiamos los 
valores iniciales entonces flexbox colocará ese espacio después del último ítem.

Si en cambio quisiéramos que los ítems crecieran para llenar ese espacio, entonces necesitaremos un método para distribuir 
el espacio sobrante entre los ítems. Es justo lo que harán las propiedades flex que aplicaremos a dichos ítems.

LA PROPIEDAD FLEX-BASIS

Con flex-basis se define el tamaño de un ítem en términos del espacio que deja como espacio disponible. El valor inicial 
de esta propiedad es auto — en este caso el navegador revisa si los ítems definen un tamaño. En el ejemplo de arriba, 
todos los ítems tienen un ancho de 100 pixeles así que este es usado como flex-basis.

Si los ítems no tiene un tamaño entonces el tamaño de su contenido es usado como flex-basis. Y por eso, apenas declarado 
display: flex en el padre a fin de crear ítems flex, todos estos ítems se ubicaron en una sola fila y tomaron solo el 
espacio necesario para desplegar su contenido.

LA PROPIEDAD FLEX-GROW

Con la propiedad flex-grow definida como un entero positivo, los ítems flex pueden crecer en el eje principal a partir de 
flex-basis. Esto hará que el ítem se ajuste y tome todo el espacio disponible del eje, o una proporción del espacio 
disponible si otro ítem también puede crecer.

Si le damos a todos los ítems del ejemplo anterior un valor flex-grow de 1 entonces el espacio disponible en el contenedor 
flex será compartido igualitariamente entre estos ítems y se ajustarán para llenar el contenedor sobre el eje principal.

Podemos usar flex-grow apropiadamente para distribuir el espacio en proporciones. Si otorgamos al primer ítem un valor 
flex-grow de 2 y a los otros un valor de 1, entonces 2 partes serán dadas al primer ítem  
(100px de 200px en el caso del ejemplo de arriba) y 1 parte para cada uno de los restantes 
(cada uno con 50px de los 200px en total).

LA PROPIEDAD FLEX-SHRINK

Así como la propiedad flex-grow se encarga de añadir espacio sobre el eje principal, la propiedad flex-shrink controla 
como se contrae. Si no contamos con suficiente espacio en el contenedor para colocar los ítems y flex-shrink posee un 
valor entero positivo, el ítem puede contraerse a partir de flex-basis. Así como podemos asignar diferentes valores de 
flex-grow con el fin que un ítem se expanda más rápido que otros — un ítem con un valor más alto de flex-shrink se 
contraerá más rápido que sus hermanos que poseen valores menores.

El tamaño mínimo del ítem tendrá que ser considerado cuando se determine un valor de contracción que pueda funcionar, 
esto significa que flex-shrink tiene el potencial de comportarse menos consistentemente que flex-grow . Por lo tanto, 
haremos una revisión más detallada de cómo este algoritmo trabaja en el artículo Controlling Ratios de los ítems sobre 
el eje principal.

Nótese que los valores de flex-grow y flex-shrink son proporciones. Típicamente si pusiéramos todos los ítems flex: 
1 1 200px y luego quisiéramos que un ítem creciera al doble, deberíamos ponerlo con flex: 2 1 200px. Aunque igualmente
podemos colocar flex: 10 1 200px y flex: 20 1 200px si quisiéramos.

VALORES ABREVIADOS PARA LAS PROPIEDADES FLEX

Difícilmente veremos la propiedades flex-grow, flex-shrink y flex-basis usadas individualmente; si no que han sido 
combinadas en la abreviación flex . La abreviación flex permite establecer los tres valores en este orden: flex-grow, 
flex-shrink, flex-basis.

Hay además algunas abreviaturas de valores que cubren la mayoría de los casos de uso. Se ven con frecuencia utilizados 
en tutoriales, y en muchos casos es todo lo que necesitamos usar. Los valores predefinidos son los siguientes:

flex: initial
flex: auto
flex: none
flex: <positive-number>

-Fijando flex: initial el ítem se restablece con los valores iniciales de Flexbox. Es lo mismo que flex: 0 1 auto. 
En este caso el valor de flex-grow is 0, así que los ítems no crecerán más de su tamaño flex-basis . 
El valor flex-shrink es 1, así que los ítems pueden contraerse si es necesario en vez de salirse de los márgenes. 
El valor de flex-basis es auto. Los ítems pueden definir un tamaño en la dimensión del eje principal, o bien obtener 
su tamaño por el contenido del los mismos.

-Usar flex: auto es lo mismo que usar flex: 1 1 auto , es como con flex:initial pero en este caso los ítems pueden crecer 
y llenar el contendor así como encoger si se requiere.

-Al usar flex: none se crearán ítems flex totalmente inflexibles. Es como escribir flex: 0 0 auto. Los ítems no pueden ni
 crecer ni encoger pero serán colocados usando flexbox con flex-basis en auto.

-Una abreviación que es común en tutoriales es flex: 1 o flex: 2  y más. Es como usar flex: 1 1 0. Los ítems pueden crecer
o encoger con un flex-basis de 0.

ALING, JUSTIFY y DISTRIBUICION DE ESPACIO LIBRE ENTRE ITEMS

Una característica clave de flexbox es la capacidad de alinear y justificar ítems sobre los ejes principal y cruzado, y 
distribuir el espacio entre los ítems flex.

ALIGN-ITEMS
La propiedad align-items alineará los ítems sobre el eje cruzado.

El valor inicial para esta propiedad es stretch razón por la cual los ítems se ajustan por defecto a la altura de aquel 
más alto. En efecto se ajustan para llenar el contenedor flex — el ítem más alto define la altura de este.

En cambio definimos align-items como flex-start para que los ítems se alineen al comienzo del contenedor flex, flex-end 
para alinearlos al final, o center para alinearlos al centro. 

Algunos de los valores de align-items:
stretch
flex-start
flex-end
center


JUSTIFY CONTENT

La propiedad justify-content es usada para alinear los ítems en el eje principal, cuyo flex-direction define la dirección
del flujo. El valor inicial es flex-start que alineará los ítems al inicio del margen del contenedor, pero también se 
podría definir como flex-end para alinearlos al final, o center para alinearlos al centro.

También podemos usar space-between para tomar todo el espacio sobrante después de que los ítems hayan sido colocados, 
y distribuir de forma pareja los ítems para que haya un espacio equitativo entre cada ítem. O bien, usamos el valor 
space-around para crear un espacio equitativo a la derecha e izquierda de cada ítem.

Alguno valores de justify-content:

space-evenly
flex-start
flex-end
center
space-around
space-between


*/
.sec{
    display: flex;
    width: 100%;
    align-items: center;
    flex-direction: column;
}
.img{
    margin: 1cm;
    width: 600PX;
    height: 500PX;
}


/*                        FLEX DIRECTION */

.sectionFlex{
    display:flex;
    width: 100%;
    align-items: center;
}

.fd{
    margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    background-color: chocolate;
    flex-direction: row;
    align-items: center;
    justify-content: space-evenly;
}
.FI{
font-size: 0.8cm;
}
.fd2{
    margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    background-color: chocolate;
    flex-direction:column-reverse;
    align-items: center;
    justify-content: space-evenly;
}
.fd3{
    margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    background-color: chocolate;
    flex-direction: row-reverse;
    align-items: flex-start;
    justify-content: space-between;
}

/*                 FLEX WRAP Y MARGIN TOP AUTO CON LOS HIJOS */
.fw{
    margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    background-color: chocolate;
    flex-wrap: wrap;
}
.fw :nth-child(6){
    margin-left: auto;
    margin-top: auto;
}

.fw1{
    margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    background-color: chocolate;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: center;
}
.fw1 :nth-child(even){
    margin-left: auto;
}
.fw2{
    margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    background-color: chocolate;
    flex-direction: column;
}
.fw2 :nth-child(3){
margin-top: auto;
margin-bottom: auto;
}
/* FLEX FLOW ES UN SHORTHAND DE F.DIRECTION + F.FLEX WRAP :
FLEX FLOW: (VALOR DIRECTION) ESPACIO (VALOR WRAP) */



/*              JUSTIFY, ALING ITEMS Y ALING CONTENT */

.fj{
    margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    background-color: chocolate;
    flex-wrap: wrap;
    justify-content: flex-end; /*Todos los elementos al final en el sentido del eje principal */
    align-items: flex-end;/*Todos los elementos al final en el sentido del eje secundario */
}

.fj1{
    margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    background-color: chocolate;
    flex-wrap: wrap;
    align-content: space-between; /*Espacia los elementos en el eje secundario */
    justify-content: center; /* Centra los elementos en el eje principal */
}

.fj2{
    margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    background-color: chocolate;
    flex-direction: column; /*Cambia el eje principal por secundario */
    flex-wrap: wrap;
    align-content: center; 
    justify-content: space-around; /*Espacia en el eje principal */
  
}

/*                   PROPIEDAD STRECH Y SELF ALING  */

/*Para usar Strech no debemos de tener height o width decalrado en los hijos, depende del eje pricipal*/
.fs{
    margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    background-color: chocolate;
    flex-direction: column;
    justify-content: space-between;
    }
    .fs :nth-child(even){
       height: 100%;
       width: 150px;
       background-color: rgb(255, 255, 255);
    }
    .fs :nth-child(odd){
        background-color: red;
        align-items: stretch; /*Invadimos el total de espacio del contenedor, SI NO SE DECLARA UN ALTO O ANCHO, EL 
        VALOR DE STRENCH ES POR DEFECTO */
    }

.fs1{
    margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    background-color: chocolate;
    flex-wrap: wrap;
    justify-content: space-between;
}
.fs1 :nth-child(even){
    background-color: aqua;
    text-align: center;
    width: 70px;
    /*Se aplica el strench por defecto, ya que no tenemos el height declarado */
}
.fs1 :nth-child(odd){
    background-color: rgb(60, 255, 0);
    height: 30px;
    order: -1; /*Cambiamos el orden de los hijos */
}

.fs2{
    margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    flex-direction: column; 
    justify-content: space-between;
  }
  .fs2 :nth-child(odd){
      background-color: blue;
      height: 60px;
      color: blue;
  }
  .fs2 :nth-child(even){
      background-color: red;
      height: 60px;
      color: red;
  }

/*              CAJAS FLEXIBLES  flex-basis, flex-grow, flex-shrink */

.ff{ margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    background-color: cadetblue;
    justify-content: space-between;

}
.ff :nth-child(n){
    background-color: yellow;
    height: 30px;
    width: 30px;
    flex-basis: 60px; /*Flex basis es lo mismo que width, pero siempre ganara en conflictosi usamos flex box,
    ademas tenemos que tener en cuenta que si estamos trabajando en un contenedor de 1000 px de ancho, y tenemos
    por ejemplo 10 hijos y a estos les declaramos un ancho de 150px (150 * 10 = 1500px), el contenedor nunca crece */
    text-align: center;
}
.ff1{ margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    background-color: cadetblue;
    justify-content: space-between;
}
.ff1 :nth-child(n){
    background-color: yellow;
    height: 30px;
    width: 30px;
    text-align: center;
    flex-grow: 1; /*le doy a los hijos un flex grow de 1, significa que toma todo el ancho y los dividira para 3 (numero
    de hijos)*/
}
.ff1 :nth-child(2){
    background-color: red
}
.ff2{ margin: 0 0 0 2cm;
    display: inline-flex;
    width: 300px;
    height: 300px;
    background-color: cadetblue;
    justify-content: space-between;
}
.ff2 :nth-child(n){
    background-color: yellow;
    height: 30px;
    flex-basis: 100px; /*Aplico un ancho generoso para ver como funciona flex-shrick */
    text-align: center;
}
.ff2 :nth-child(2){
    background-color: red;
    flex-shrink: 4; /*Al contrario que flex-grow, este encoge los elementos*/
}
/*      SHORT HAND DE FLEX   

La propiedad flex es una propiedad de los ítems del contenedor flex.

Para que podamos escribir menos código, el CSS nos permite abreviar las tres propiedades: flex-grow, flex-shrink 
( opcional ) y flex-basis ( opcional ) en una sola: flex. El valor por defecto es flex: 0 1 auto.

.item { flex: flex-grow [flex-shrink] [flex-basis]; }  */

.banner{
    display: flex;
    margin-left: auto;
    margin-right: auto;
    height: 490px;
    width: 90%;
}
.item{
    margin-left: 0;
    margin-right: 0;
   display: flex;
   flex: 1 2 100px; /* Abreviacion, se puede agrandar en 1, se puede encoger en 2 y el ancho de la foto es 100px */
   transition: all .5s;
}
.item span{
    color: rgba(250, 235, 215, 0.007); /*Texto transparente */
    font-family: cursive;
    margin-top: 0; /*Texto arriba */
   /*  margin: auto;  Asi lo centramaos a mitad de pantalla */
}

.item:hover span{  /*  Cuando hacemos hover el texto se modifica  */
    font-size: 2cm;
    color: rgb(170, 9, 9);
}

.item:hover{
    flex: 10 0 auto; /*  Cuando hacemos hover en una foto, esta foto se estira  */
}

.item:first-child{
 background-image: url(https://i.pinimg.com/originals/3e/43/ee/3e43ee97d171178e063f4ff2506d0043.jpg);
 background-repeat: no-repeat;
 background-size: 800px;
}
.item:nth-child(2){
    background-image: url(https://services.travelsavers.com/AMGService.svc/REST/GetImage?ImageID=01c7e79d-617a-ea11-83a5-782bcb66a2f2);
    background-repeat: no-repeat;
 background-size: 800PX
}
.item:nth-child(3){
    background-image: url(https://whatsup.es/wp-content/uploads/2018/10/vocabulario_en_ingles.jpg);
background-repeat: no-repeat;
background-size: cover;}
.item:last-child{
    background-image: url(https://estaticos.elperiodico.com/resources/jpg/2/2/invierno-paisaje-1576018050722.jpg);
}


/*Menu con Flex box */

.menuP{

 display: flex;
 background-color: darkmagenta;
 margin-bottom: 25vh; /* 25% del total del viewport */
 width: 600px;
}
.menu{   /*Todos los <u> */
    margin-top: 0;
    margin-left: 0;
    padding-left: 0;
    list-style: none;
}
.menuItem{
    flex: auto; /*Hacemos que los anchos de los elementos se repartan automaticamente */
}
.link{
    text-align: center;
    color: white;
    padding: 10px;
    text-decoration: none;
    display: block;
    border: 3px double red;
    font-size: 0.5cm;
}
.menu ul a{
    text-align: center;
    color: black;
    background-color: aqua;
    padding: 10px;
    display: block;
    text-decoration: none;
    font-size: 0.5cm;
    white-space: nowrap;
    border: 1px solid black;
}
li{
    position: relative;
}
li > ul{
    position: absolute;
    display: none;
}
li:hover > ul{
    display: flex;
}
li ul ul{
    top: 50%;
    left: 100%;
}



/*Ejercicio de dados 

Dado 1  */

.dados{
    color: red;
    font-weight: 1000;
    font-family: fantasy;
    font-size: 1.2cm;
    margin:0 15px ;

}

.d1{
    display: inline-flex;
    margin-left: 0.4cm;
    width: 200px;
    height: 200px;
    background-color: white;
    border-radius: 10px;
}
.d1 :first-child{
    margin: auto;
}
/*Dado 2*/
.d2{
    display: inline-flex;
    margin-left: 0.4cm;
    width: 200px;
    height: 200px;
    background-color: white;
    border-radius: 10px;
    justify-content: space-between;
    flex-direction: column;
}
.d2 div{
    margin: 0 15px;
}
.d2 :nth-child(2){
    align-self: flex-end;
}
/* dado 3 */
.d3{
    display: inline-flex;
    margin-left: 0.4cm;
    width: 200px;
    height: 200px;
    background-color: white;
    border-radius: 10px;
    justify-content: space-between;
    flex-direction: column;
}
.d3 div{
    margin: 0 15px;
}
.d3 :nth-child(3){
    align-self: flex-end;
}
.d3 :nth-child(2){
    margin: auto;
}
/* Dado 4 */
.d4{
    display: inline-flex;
    margin-left: 0.4cm;
    width: 200px;
    height: 200px;
    background-color: white;
    border-radius: 10px;
    justify-content: space-between;
    flex-direction: column;
    flex-wrap: wrap;
}
.d4 :nth-child(4){
    margin-left: -40px;
    margin-bottom: 200px;
}
.d4 :nth-child(3){
    margin-left: 163px;
    margin-top: -60px;
}
.d4 :nth-child(2){
    margin-top: 80px;
}
/*Dado 5 */
.d5{
    display: inline-flex;
    margin-left: 0.4cm;
    width: 200px;
    height: 200px;
    background-color: white;
    border-radius: 10px;
    justify-content: space-between;
    flex-direction: column;
    flex-wrap: wrap;
}
.d5 :nth-child(4){
    margin-left: -40px;
    margin-bottom: 200px;
}
.d5 :nth-child(3){
    margin-left: 163px;
    margin-top: -60px;
}
.d5 :nth-child(2){
    margin-top: 80px;
}

.d5 :nth-child(5){
    margin: auto;
    margin-left: -110px;
}
/* Dado 6 */

.d6{
    display: inline-flex;
    margin-left: 0.4cm;
    width: 200px;
    height: 200px;
    background-color: white;
    border-radius: 10px;
    justify-content: space-between;
    flex-direction: column;
    flex-wrap: wrap;
}
.d6 :nth-child(n+4){
    margin-left: auto;
}
/*LAYOUT con flex vox 

La layout o plantilla es un esquema de la distribución de los elementos dentro de una página web. Se compone de una 
serie de bloques de ciertas dimensiones en los que se colocará el contenido. */

.layout{
    display: flex inline-block;
}
.middle{
    display: flex;
    flex: auto;
    min-height: 100%;
}
.header{
    background-color: rgba(0, 0, 139, 0.616);
    text-align: center;
    padding: 20px;
}
.first{
    background-color: rgba(128, 255, 0, 0.685);
    flex-basis: 25%;
    text-align: center;
}
.main{
    background-color: rgba(255, 0, 0, 0.671);
    flex-basis: 50%;
    text-align: center;
}
.second{
    background-color: rgba(255, 255, 0, 0.699);
    flex-basis: 25%;
    text-align: center;
}
.footer{
    background-color: rgba(220, 20, 60, 0.705);
    text-align: center;
    padding: 15px;
}



